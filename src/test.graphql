type Project {
   id: Int!
   name: String
    preview:String
    description: String
   owner : User
   members : [User]
   branches : [Branch]
}

type User {
    id: Int!
    name: String
    minecraftUUID : String
    projects: [Project]
}

type Branch {
   id: Int!
   name: String!
   schematic: String
   commits: [Commit]
}

type Commit {
    id: Int!
    schematic: String
    user: User
    timestamp: Int
    branch: Branch
    message: String
}

type CommitResult {
    successful: Boolean,
    dubious: Boolean,
    error_message: Boolean,
    dubious_message: Boolean,
    commit: Commit
}

type AuthPayload {
    access_token: String!
    user: User!
}

type Diff {
    x: Int!
    y: Int!
    z: Int!
    from: String!
    to: String!
}

type Query {
    getUser(id:Int): User
    getProjects: [Project],
    getProject(id:Int): Project
}

type Mutation {
    createProject(
        name:String,
        description:String,
        width: Int
        height: Int
        length: Int
    ) : Project,

    createDiff(projectID:Int,branchID:Int, schematic:String) : [Diff],
    commitToProject(commitMessage:String,projectID:Int,branchID:Int, schematic:String) : Commit,
    login(username: String!, password: String!): AuthPayload!
    register(username: String!, password: String!): AuthPayload!
}